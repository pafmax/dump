transpose <- t(A)
square <- transpose %*% A
e <- eigen(square)
plot(e)
e
View(A)
View(transpose)
W <- X/(Y^2)
qqnorm(W);qqline(W, col=2)
B <- as.matrix(cbind(X, Y, W))
qr(B)$rank
transposeB <- t(B)
squareB <- transposeB %*% B
e2 <- eigen(squareB)
e2
qqnorm(W, main = "Normal Q-Q Plot for W");qqline(W, col=2)
A <- NULL
library(sn)
for(i in 1:100){
data <- mean(rsn(5, 0, 1, 2.5))
A <- rbind(A, data)
}
qqnorm(A, main = "Normal Q-Q Plot for A");qqline(A, col=2)
A1 <- ad.test(A)$p.value
```{r, echo=FALSE}
library(sn)
library(nortest)
A <- NULL
for(i in 1:100){
data <- mean(rsn(5, 0, 1, 2.5))
A <- rbind(A, data)
}
qqnorm(A, main = "Normal Q-Q Plot for A");qqline(A, col=2)
ks.test(A, y=pnorm)
shapiro.test(A)
ad.test(A)
B <- NULL
for(i in 1:100){
data <- mean(rsn(50, 0, 1, 2.5))
B <- rbind(B, data)
}
qqnorm(B, main = "Normal Q-Q Plot for B");qqline(B, col=2)
ks.test(B, y=pnorm)
shapiro.test(B)
ad.test(B)
C <- NULL
for(i in 1:100){
data <- mean(rsn(100, 0, 1, 2.5))
C <- rbind(C, data)
}
qqnorm(C, main = "Normal Q-Q Plot for C");qqline(C, col=2)
ks.test(C, y=pnorm)
shapiro.test(C)
ad.test(C)
A1 <- ad.test(A)$p.value
A2 <- ks.test(A, y=pnorm)$p.value
A3 <- shapiro.test(A)$p.value
B1 <- ad.test(B)$p.value
B2 <- ks.test(B, y=pnorm)$p.value
B3 <- shapiro.test(B)$p.value
C1 <- ad.test(C)$p.value
C2 <- ks.test(C, y=pnorm)$p.value
C3 <- shapiro.test(C)$p.value
values <- matrix(c(A1,A2,A3,B1,B2,B3,C1,C2,C3), ncol=3, nrow = 2)
values <- matrix(c(A1,A2,A3,B1,B2,B3,C1,C2,C3), ncol=3, nrow = 3)
View(values)
ks.test(A, y=pnorm)
shapiro.test(A)
ad.test(A)
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3, row.names(c("A","B","c"), colnames(c("AD","KS","SW"))))
values <- row.names(c("A","B","c")
values <- colnames(c("AD","KS","SW"))))
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
values <- row.names(c("A","B","c")
values <- colnames(c("AD","KS","SW"))))
values <- row.names(c("A","B","c"))
values <- colnames(c("AD","KS","SW")))
values <- colnames(c("AD","KS","SW"))
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
values <- row.names(list(c("A","B","c")))
values <- colnames(list(c("AD","KS","SW")))
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
View(values)
values <- names(list(c("A","B","c")))
values <- rownames(list(c("A","B","c")))
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
values <- rownames(list(c("A","B","c")))
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
rownames(values) <- c("A","B","c")
colnames(values) <- c("AD","KS","SW")
View(values)
values
values <- matrix(c(A1,B1,C1,A2,B2,C2,A3,B3,C3), ncol=3, nrow = 3)
rownames(values) <- c("A: 5","B: 50","C: 100")
colnames(values) <- c("AD","KS","SW")
values
values <- matrix(c(B1,C1,A1,B2,C2,A2,B3,C3,A3), ncol=3, nrow = 3)
rownames(values) <- c("A: 5","B: 50","C: 100")
colnames(values) <- c("AD","KS","SW")
values
colnames(values) <- c("KS","SW","AD")
values
colnames(values) <- c("K-S","S-W","A-D")
values
values <- matrix(c(A2,B2,C2,A3,B3,C3,A1,B1,C1), ncol=3, nrow = 3)
rownames(values) <- c("A: 5","B: 50","C: 100")
colnames(values) <- c("K-S","S-W","A-D")
values
as.data.table(values)
as.table(values)
install.packages("tm")
library(caret)
bulls <- read.table("/Users/pedro/Dropbox/UTS/MDA/T1-10.dat", header = FALSE)
bulls <- read.table("/Users/pedro/Dropbox/UTS/MDA/wicherndata//T1-10.dat", header = FALSE)
bulls <- read.table("/Users/pedro/Dropbox/UTS/MDA/wicherndata/T1-10.dat", header = FALSE)
library(qqplot)
library(ggplot)
library(ggplot2)
qplot(xyrot0)
xf <- rnorm(50,0,1) # 50 copies of N(0,1)
yf<- rnorm(50,0,10) # 50 copies of N(0,10)
xyf <- cbind(xf,yf) # 50 coordinate pairs (x,y)
rot <- matrix(c(1,-1,1,1),nrow=2,ncol=2)
xyrot0 <- xyf %*% rot # rotate by 45 degrees
xs <- rnorm(50,0,1) # 50 copies of N(0,1)
ys <- rnorm(50,0,10) # 50 copies of N(0,10)
xys <- cbind(xs,ys)
xyrot1 <- xys %*% rot + 1 # rotate by 45 degrees and shift by (1,1)
xyfs=rbind(xyf,xys)
xyrot<-rbind(xyrot0,xyrot1)
hilo <- factor(gl(2,50,len=2*50)) # label "1" for xyf, "2" for xys
qplot(xyrot0)
library(formattable)
install.packages("formattable")
library(formattable)
formattable(mean_response_a)
library(gdata)
library(formattable)
treatment1 <- matrix(c(6, 7, 5, 8, 6, 9, 8, 7, 6, 8), ncol = 5)
treatment2 <- matrix(c(3, 4, 4, 4, 1, 6), ncol = 3)
treatment3 <- matrix(c(2, 4, 3, 2, 4, 6), ncol = 3)
treatment4 <- matrix(c(9, 10, 10, 12), ncol = 2)
responseA <-
as.matrix(t(
cbindX(
as.data.frame(treatment1[1, ]),
as.data.frame(treatment2[1, ]),
as.data.frame(treatment3[1, ]),
as.data.frame(treatment4[1, ])
)
))
rownames(responseA) <-
c("Treatment1", "Treatment2", "Treatment3" , "Treatment4")
responseB <-
as.matrix(t(
cbindX(
as.data.frame(treatment1[2, ]),
as.data.frame(treatment2[2, ]),
as.data.frame(treatment3[2, ]),
as.data.frame(treatment4[2, ])
)
))
rownames(responseB) <-
c("Treatment1", "Treatment2", "Treatment3" , "Treatment4")
responseA_vector <- responseA * 0
mean_response_a <-
replace(responseA, responseA_vector == 0 , mean(responseA, na.rm = TRUE))
formattable(mean_response_a)
format_table(mean_response_a)
mean_response_a
formattable(mean_response_a, list())(mean_response_a)
formattable(mean_response_a, list())
knitr::kable(mean_response_a)
knitr::kable(residualsB)
treatments_for_responseB <- rowmeans_for_responseB - mean_response_b
print(treat_matrix)
paste0(print(treat_matrix))
treatment1 <- matrix(c(6, 7, 5, 8, 6, 9, 8, 7, 6, 8), ncol = 5)
treatment2 <- matrix(c(3, 4, 4, 4, 1, 6), ncol = 3)
treatment3 <- matrix(c(2, 4, 3, 2, 4, 6), ncol = 3)
treatment4 <- matrix(c(9, 10, 10, 12), ncol = 2)
treatments_for_responseB <- rowmeans_for_responseB - mean_response_b
treatment1 <- matrix(c(6, 7, 5, 8, 6, 9, 8, 7, 6, 8), ncol = 5)
treatment2 <- matrix(c(3, 4, 4, 4, 1, 6), ncol = 3)
treatment3 <- matrix(c(2, 4, 3, 2, 4, 6), ncol = 3)
treatment4 <- matrix(c(9, 10, 10, 12), ncol = 2)
responseA <-
as.matrix(t(
cbindX(
as.data.frame(treatment1[1, ]),
as.data.frame(treatment2[1, ]),
as.data.frame(treatment3[1, ]),
as.data.frame(treatment4[1, ])
)
))
rownames(responseA) <-
c("Treatment1", "Treatment2", "Treatment3" , "Treatment4")
responseB <-
as.matrix(t(
cbindX(
as.data.frame(treatment1[2, ]),
as.data.frame(treatment2[2, ]),
as.data.frame(treatment3[2, ]),
as.data.frame(treatment4[2, ])
)
))
rownames(responseB) <-
c("Treatment1", "Treatment2", "Treatment3" , "Treatment4")
responseA_vector <- responseA * 0
#Mean matrix for response A
mean_response_a <-
replace(responseA, responseA_vector == 0 , mean(responseA, na.rm = TRUE))
knitr::kable(mean_response_a)
#Mean matrix of response B
responseB_vector <- responseB * 0
mean_response_b <-
replace(responseB, responseB_vector == 0 , mean(responseB, na.rm = TRUE))
knitr::kable(mean_response_b)
#Now let's calculate the treatment effect
A_1_treatment_val <-
as.matrix(replace(
responseA[1, ],
responseA_vector[1, ] == 0 ,
mean(responseA[1, ], na.rm = TRUE)
))
A_2_treatment_val <-
as.matrix(replace(
responseA[2, ],
responseA_vector[2, ] == 0 ,
mean(responseA[2, ], na.rm = TRUE)
))
A_3_treatment_val <-
as.matrix(replace(
responseA[3, ],
responseA_vector[3, ] == 0 ,
mean(responseA[3, ], na.rm = TRUE)
))
A_4_treatment_val <-
as.matrix(replace(
responseA[4, ],
responseA_vector[4, ] == 0 ,
mean(responseA[4, ], na.rm = TRUE)
))
rowmeans_for_responseA <-
t(cbindX(
as.data.frame(A_1_treatment_val),
as.data.frame(A_2_treatment_val),
as.data.frame(A_3_treatment_val),
as.data.frame(A_4_treatment_val)
))
#hence the treatment matrix will look like
treatments_for_responseA <- rowmeans_for_responseA - mean_response_a
knitr::kable(treatments_for_responseA)
#we do the same for response B
B_1_treatment_val <-
as.matrix(replace(
responseB[1, ],
responseB_vector[1, ] == 0 ,
mean(responseB[1, ], na.rm = TRUE)
))
B_2_treatment_val <-
as.matrix(replace(
responseB[2, ],
responseB_vector[2, ] == 0 ,
mean(responseB[2, ], na.rm = TRUE)
))
B_3_treatment_val <-
as.matrix(replace(
responseB[3, ],
responseB_vector[3, ] == 0 ,
mean(responseB[3, ], na.rm = TRUE)
))
B_4_treatment_val <-
as.matrix(replace(
responseB[4, ],
responseB_vector[4, ] == 0 ,
mean(responseB[4, ], na.rm = TRUE)
))
rowmeans_for_responseB <-
t(cbindX(
as.data.frame(B_1_treatment_val),
as.data.frame(B_2_treatment_val),
as.data.frame(B_3_treatment_val),
as.data.frame(B_4_treatment_val)
))
#hence the treatment matrix will look like
treatments_for_responseB <- rowmeans_for_responseB - mean_response_b
knitr::kable(treatments_for_responseB)
residualsA <- responseA - rowmeans_for_responseA
residualsB <- responseB - rowmeans_for_responseB
SStreat <-
sum(treatments_for_responseA * treatments_for_responseB, na.rm = TRUE)
#Treatment matrix
treat_matrix <-
matrix(c(
sum(treatments_for_responseA ^ 2, na.rm = TRUE),
SStreat,
sum(treatments_for_responseB ^ 2, na.rm = TRUE)
),
ncol = 2,
nrow = 2)
#Sum of squares of Residuals
SSresiduals <- sum(residualsA * residualsB, na.rm = TRUE)
#Residual Matrix
residual_matrix <-
matrix(c(
sum(residualsA ^ 2, na.rm = TRUE),
SSresiduals,
sum(residualsB ^ 2, na.rm = TRUE)
),
ncol = 2,
nrow = 2)
#Total
Total_corrected <- treat_matrix + residual_matrix
print(treat_matrix)
paste0(print(treat_matrix))
paste(print(treat_matrix))
paste(treat_matrix))
paste(treat_matrix)
paste0(treat_matrix)
matrix(treat_matrix)
treat_matrix
Total_corrected
table(Total_corrected)
plot.table(Total_corrected)
a <- as.matrix(c(treatment1[1,],treatment2[1,],treatment3[1,],treatment4[1,]))
b <- as.matrix(c(treatment1[2,],treatment2[2,],treatment3[2,],treatment4[2,]))
type <- factor(c(1,1,1,1,1,2,2,2,3,3,3,4,4))
fit <- manova(cbind(a,b) ~type)
fit
print(fit)
lambda <- det(residual_matrix)/det(treat_matrix+residual_matrix)
f <- ((1-sqrt(lambda))/sqrt(lambda))*((13-4-1)/(4-1))
B <- treat_matrix
W_inv <- solve(residual_matrix)
W_inv_B <- W_inv %*% B
eigen_c <- eigen(W_inv_B)
print((1/(1+eigen_c$values[1])) * (1/(1+eigen_c$values[2])))
bulls <-
read.table("/Users/pedro/Dropbox/UTS/MDA/wicherndata/T1-10.dat",
header = FALSE)
names(bulls) <-
c(
"Breed",
"SalePr",
"YrHgt",
"FtFrBody",
"PrctFFB",
"Frame",
"BkFat",
"SaleHT",
"SaleWt"
)
bulls$Breed <-
as.factor(bulls$Breed) #because breed is a categorical variable!
bulls.model1 <-
lm(SalePr ~ Breed + YrHgt + FtFrBody + PrctFFB + BkFat + SaleHT + SaleWt,
data = bulls)
bulls.model2 <-
lm(SalePr ~ Breed + YrHgt + FtFrBody + SaleHT, data = bulls)
bulls.model3 <- lm(SalePr ~ Breed + YrHgt, data = bulls)
bulls.model4 <-
lm(SalePr ~ Breed + YrHgt + FtFrBody + PrctFFB + BkFat + SaleHT, data =
bulls)
bulls.model3 <-
lm(SalePr ~ Breed + YrHgt, data = bulls)
bulls.model4 <-
lm(SalePr ~ Breed + YrHgt + FtFrBody + PrctFFB + BkFat + SaleHT, data =
bulls)
anova(bulls.model1, bulls.model2, bulls.model3, bulls.model4)
print(anova(bulls.model1, bulls.model2, bulls.model3, bulls.model4))
bulls <-
bulls[c(
"Breed",
"YrHgt",
"FtFrBody",
"PrctFFB",
"BkFat",
"SaleHT",
"SaleWt",
"SalePr",
"Frame"
)]
bulls.pca <- prcomp(bulls[2:7], center = TRUE, scale. = TRUE)
plot(bulls.pca, type = "lines")
print(summary(bulls.pca))
bullsPC1 <- data.frame(bulls$Breed, bulls.pca$x[, 1], bulls$SalePr)
names(bullsPC1) <- c("Breed", "PC1", "SalePr")
bulls.pmodel <- lm(SalePr ~ Breed + PC1, data = bullsPC1)
print(anova(bulls.model1,
bulls.model2,
bulls.model3,
bulls.model4,
bulls.pmodel))
library(MVN)
print(roystonTest(bulls[2:7]))
print(roystonTest(bulls.pca$x))
R <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), ncol = 3)
knitr::kable(R)
print(summary(princomp(covmat=R)))
R <- matrix(c(1, 0, 0, 0, 1, .7, 0, .7, 1), ncol = 3)
print(eigen(R)$values)
print(summary(princomp(covmat = R)))
R <- matrix(c(1, .8, .6, .8, 1, .7, .6, .7, 1), ncol = 3)
print(eigen(R)$values)
print(summary(princomp(covmat=R)))
R <- matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 1), ncol=3)
eigen(R$values)
eigen((R)$values)
R <- matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 1), ncol=3)
print(eigen(R)$values)
print(summary(princomp(covmat=R)))
par(mfrow = c(2, 2))
plot(density(xf))
plot(density(yf))
qqnorm(xf)
qqline(xf, col = "red")
qqnorm(yf)
qqline(yf, col = "red")
xf <- rnorm(500, 0, 1)
yf <- rnorm(500, 0, 10)
xyf <- cbind(xf, yf)
# Rotation of coordinates:
rot <- matrix(c(1, -1, 1, 1), nrow = 2, ncol = 2)
xyrot0 <- xyf %*% rot # rotate by 45 degrees
# Repeat
xs <- rnorm(500, 0, 1)
ys <- rnorm(500, 0, 10)
xys <- cbind(xs, ys)
xyrot1 <- xys %*% rot + 1 # rotate by 45 degrees and shift by (1,1)
#Combine the two unrotated data sets
xyfs = rbind(xyf, xys)
# Combine the two rotated data sets
xyrot <- rbind(xyrot0, xyrot1)
#Calculate a factor to label whether the reading are from xyf or xys
hilo <- factor(gl(2, 500, len = 2 * 500))
par(mfrow = c(2, 2))
plot(density(xf))
plot(density(yf))
qqnorm(xf)
qqline(xf, col = "red")
qqnorm(yf)
qqline(yf, col = "red")
aminoacid_data <-
read_excel(
"/Users/pedro/Dropbox/UTS/MDA/haemolymph.xls",
col_types = c("numeric", "numeric", "numeric", "numeric", "numeric", "text"),
na = "null"
)
aminoacid_data$Species_code <- aminoacid_data$Species
aminoacid_data$Species <- as.factor(aminoacid_data$Species)
aminoacid_data$Species <- as.numeric(aminoacid_data$Species)
aminoacid_data <-
read_excel(
"/Users/pedro/Dropbox/UTS/MDA/haemolymph.xls",
col_types = c("numeric", "numeric", "numeric", "numeric", "numeric", "text"),
na = "null"
)
library(tidyverse)
library(readxl)
library(gridExtra)
aminoacid_data <-
read_excel(
"/Users/pedro/Dropbox/UTS/MDA/haemolymph.xls",
col_types = c("numeric", "numeric", "numeric", "numeric", "numeric", "text"),
na = "null"
)
aminoacid_data$Species_code <- aminoacid_data$Species
aminoacid_data$Species <- as.factor(aminoacid_data$Species)
aminoacid_data$Species <- as.numeric(aminoacid_data$Species)
fish.model <-
lm(Species ~ Phenylalanine + Leucine + Glycine + Valine + Thyrosine,
data = aminoacid_data)
print(summary(fish.model))
amino.pca <- prcomp(aminoacid_data[, 1:5], center = TRUE, scale.=TRUE)
print(summary(amino.pca))
aminoacid_PC_data <- data.frame(aminoacid_data[, 6:7], amino.pca$x[,1:2])
fish.pmodel <- lm(Species ~ PC1+PC2, data=aminoacid_PC_data)
print(summary(fish.pmodel))
anova(fish.model, fish.pmodel)
print(anova(fish.model, fish.pmodel))
aminoacid_PC_data <- aminoacid_PC_data[c("PC1", "PC2", "Species_code")]
new_measurements <-
matrix(c(1, 1, 3, 2.5, 3, 2, 4.5 , 5, 6, 2.5, 1, 5 , 2.5, 4, 2),
ncol = 5,
nrow = 3)
components <- prcomp(new_measurements, center = TRUE, scale. = TRUE)
new_pc_data <- as.data.frame(components$x[, 1:2])
names(new_pc_data) <- c("PC1", "PC2")
prediction <- predict.lm(
fish.pmodel,
new_pc_data,
interval = c("none", "confidence", "prediction"),
level = 0.95
)
print(prediction)
new_measurements_df <- as.data.frame(new_measurements)
names(new_measurements_df) <-
c("Phenylalanine", "Leucine", "Glycine", "Valine", "Thyrosine")
#Do the prediction
full_prediction <- predict.lm(
fish.model,
new_measurements_df,
interval = c("none", "confidence", "prediction"),
level = 0.95
)
print(full_prediction)
list=ls()
ls()
hilo <- factor(gl(2, 500, length = 2 * 500)) # label "1" for xyf, "2" for xys
rm(list=ls())
